version: '3.8'

# This compose file sets up the full local development environment for ForkGuard.
# It includes the core infrastructure (Postgres, Redis, Redpanda), a mock
# Ethereum node (Anvil), and an observability stack (Prometheus, Grafana, Jaeger).

services:
  # Core Infrastructure
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: forkguard
      POSTGRES_PASSWORD: forkguard
      POSTGRES_DB: forkguard
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U forkguard -d forkguard"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: redpanda
    command:
      - redpanda
      - start
      - --smp 1
      - --overprovisioned
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
    ports:
      - "9092:9092"   # Kafka API
      - "9644:9644"   # Redpanda Admin

  # Ethereum Mock Node
  anvil:
    image: ghcr.io/foundry-rs/foundry:latest # Use the official stable release tag
    container_name: anvil
    entrypoint:
      - anvil
      - --host
      - 0.0.0.0
      - --block-time
      - '3'
    ports:
      - "8545:8545"
    healthcheck:
      test: ["CMD", "cast", "chain-id", "--rpc-url", "ws://localhost:8545"]
      interval: 1s
      timeout: 1s
      retries: 30

  migrator:
    image: migrate/migrate:v4.17.1
    volumes:
      - ./db/migrations:/migrations
    command: ["-path", "/migrations", "-database", "postgres://forkguard:forkguard@postgres:5432/forkguard?sslmode=disable", "up"]
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  # Observability Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus:/etc/prometheus
    command: --config.file=/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-oss:9.5.3
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana

  jaeger:
    image: jaegertracing/all-in-one:1.45
    container_name: jaeger
    ports:
      - "6831:6831/udp" # Agent
      - "16686:16686"   # UI

  ingestor:
    build:
      context: .
      target: ingestor
    depends_on:
      anvil:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    environment:
      - FORKGUARD_DB_DSN=postgres://forkguard:forkguard@postgres:5432/forkguard?sslmode=disable
      - FG_ETH_RPC_URL=ws://anvil:8545
      - FG_KAFKA_BROKERS=redpanda:29092

  publisher:
    build:
      context: .
      target: publisher
    depends_on:
      migrator:
        condition: service_completed_successfully
      redpanda:
        condition: service_started
    environment:
      - FORKGUARD_DB_DSN=postgres://forkguard:forkguard@postgres:5432/forkguard?sslmode=disable
      - FG_KAFKA_BROKERS=redpanda:29092
      - FG_ETH_RPC_URL=ws://anvil:8545

  dispatcher:
    build:
      context: .
      target: dispatcher
    depends_on:
      migrator:
        condition: service_completed_successfully
      redpanda:
        condition: service_started
      redis:
        condition: service_healthy
    environment:
      - FORKGUARD_DB_DSN=postgres://forkguard:forkguard@postgres:5432/forkguard?sslmode=disable
      - FG_KAFKA_BROKERS=redpanda:29092
      - FG_ETH_RPC_URL=ws://anvil:8545
      - FG_REDIS_URL=redis://redis:6379/0
      - FG_IDEMPOTENCY_KEY_TTL=5m

  api:
    build:
      context: .
      target: api
    ports:
      - "8080:8080"
    depends_on:
      migrator:
        condition: service_completed_successfully
    environment:
      - FORKGUARD_DB_DSN=postgres://forkguard:forkguard@postgres:5432/forkguard?sslmode=disable
      - FG_ETH_RPC_URL=ws://anvil:8545
      
  webhook-receiver:
    build:
      context: .
      dockerfile: Dockerfile.webhook-receiver
    container_name: webhook-receiver
    ports:
      - "8000:8000"
    # environment:
      # To test failures, you can set FAIL_COUNT
      # - FAIL_COUNT=4


volumes:
  postgres_data:
  grafana_data: